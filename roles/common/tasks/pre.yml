# get hostname
- command: hostname
  register: hostname

- set_fact:
    actual_hostname: "{{hostname.stdout}}"
    cacheable: true

# resolving..
- name: tail resolver - office
  lineinfile: dest=/etc/resolvconf/resolv.conf.d/tail create=yes state=present line="nameserver 172.16.5.1"
  when: actual_hostname != "volna"

- name: tail resolver - dc
  lineinfile: dest=/etc/resolvconf/resolv.conf.d/tail create=yes state=present line="nameserver 172.16.5.1"
  when: actual_hostname == "volna"

- name: default resolver - office
  lineinfile: dest=/etc/resolv.conf create=yes state=present line="nameserver 172.16.5.1"
  when: actual_hostname != "volna"

- name: default resolver - dc
  lineinfile: dest=/etc/resolv.conf create=yes state=present line="nameserver 185.255.96.1"
  when: actual_hostname == "volna"

- name: force default dns resolver
  lineinfile: dest=/etc/NetworkManager/NetworkManager.conf create=yes state=present line="dns=default" insertafter="^\[main\]"
  register: nm
  ignore_errors: yes

- name: force default dns - remove resolv
  file: path=/etc/resolv.conf state=absent
  when: nm is changed

- name: force default dns - restart network manager
  service: name=network-manager state=restarted
  when: nm is changed
  ignore_errors: yes

- name: force default dns - write default resolver
  lineinfile: dest=/etc/resolv.conf create=yes state=present line="nameserver 172.16.5.1"
  when: nm is changed and actual_hostname != "volna"

- name: force default dns - write default resolver
  lineinfile: dest=/etc/resolv.conf create=yes state=present line="nameserver 185.255.96.1"
  when: nm is changed and actual_hostname == "volna"

- name: install periodic ansible provisioning as ansible-pull cron
  copy: >
    src=ansible-pull dest=/etc/cron.d/ansible-pull owner=root group=root mode=0644

# APT force to new repo
- name: APT sources
  copy: >
    src=sources.list.focal dest=/etc/apt/sources.list owner=root group=root mode=0644
  notify: apt upgrade

- name: install apt key requirement - dirmngr
  apt: pkg=dirmngr state=present force=yes force=yes install_recommends=yes
  ignore_errors: yes

# deprecated: id={{ item }} keyserver=keyserver.ubuntu.com
- name: install missing apt keys to solve NO_PUBKEY errors
  apt_key: id={{ item }} keyserver=keyserver.ubuntu.com
  with_items:
    - A2F683C52980AECF
    - 531EE72F4C9D234C
    - 4F191A5A8844C542
    - 1F3045A5DF7587C3
    - 684A14CF2582E0C5
  ignore_errors: yes


# APT packages + Kernel
- name: apt packages
  apt:
    state: latest
    cache_valid_time: 86400
    force: yes
    install_recommends: yes
    update_cache: yes
    name:
    - apt-transport-https
    - linux-headers-generic
    - linux-image-generic
    - linux-sound-base
  ignore_errors: yes

# FIRMWARE
- name: kernel firmware check
  tags: firmware
  stat: path=/lib/firmware/.git
  register: git_dir
  ignore_errors: yes

#- name: kernel firmware download if not exists
#  tags: firmware
#  shell: cd /lib/firmware; git pull -f origin master; git checkout -f
#  when: git_dir.stat.exists

- name: kernel firmware init .git
  tags: firmware
  shell: cd /lib/firmware; git init; git remote add origin https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git; git fetch --depth=1; git reset --mixed origin/master
  when: git_dir.stat.exists == false


- name: grub default cmdline
  lineinfile:
    dest: /etc/default/grub
    state: present
    line: GRUB_CMDLINE_LINUX_DEFAULT="net.ifnames=0 biosdevname=0"
  notify: grub

# LOCAL tuning
- name: rc.local
  copy: >
    src=rc.local dest=/etc/rc.local owner=root group=root mode=0755

- name: tune-ssd script
  copy: >
    src=tune-ssd dest=/usr/local/sbin/tune-ssd owner=root group=root mode=0755
  notify: exec rc-local

- name: tune iscsi in udev
  copy: >
    src=iscsi.udev dest=/etc/udev/rules.d/50-iscsi.rules owner=root group=root mode=0644

- name: force caching to RAM dirty_ratio to 99 perc
  lineinfile: dest=/etc/sysctl.conf create=yes state=present line="vm.dirty_ratio = 99"
  notify: update sysctl

- name: force caching to RAM dirty_background_ratio 50 perc
  lineinfile: dest=/etc/sysctl.conf create=yes state=present line="vm.dirty_background_ratio = 50"
  notify: update sysctl

- name: force caching to RAM dirty_expire_centisecs to 30min write delay
  lineinfile: dest=/etc/sysctl.conf create=yes state=present line="vm.dirty_expire_centisecs = 1800"
  notify: update sysctl

- name: force caching to RAM dirty_writeback_centisecs to 30min write delay
  lineinfile: dest=/etc/sysctl.conf create=yes state=present line="vm.dirty_writeback_centisecs = 1800"
  notify: update sysctl

- name: raise inotify limits
  lineinfile: dest=/etc/sysctl.conf create=yes state=present line="fs.inotify.max_user_watches = 524288"
  notify: update sysctl

# temporary disable ipv6 per request (due to lack of ipv6 from local isp)
- name: disable ipv6 networking
  sysctl: name={{ item }} value=1 state=present reload=yes
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6

- name: disable ipv6 dns AAAA lookups
  lineinfile:
    dest: /etc/gai.conf
    regexp: '^#precedence\s*::ffff:0:0/96\s*100.*$'
    line: 'precedence ::ffff:0:0/96  100'

# iscsi tune
- name: tune iscsi replace timeout
  lineinfile: dest=/etc/iscsi/iscsid.conf regexp='^node.session.timeo.replacement_timeout' line='node.session.timeo.replacement_timeout = 86400' state=present
  ignore_errors: yes

- name: tune iscsi noop timeout
  lineinfile: dest=/etc/iscsi/iscsid.conf regexp='^node.conn\[0\].timeo.noop_out_timeout' line='node.conn[0].timeo.noop_out_timeout = 1800' state=present
  ignore_errors: yes

- name: create dir for dropbear-initramfs
  file: path=/etc/dropbear-initramfs state=directory mode=0775

# DRIVERS
#- name: nvidia
#  apt: pkg={{ item }} state=latest cache_valid_time=86400 force=yes install_recommends=yes update_cache=yes
#  with_items:
#    - xserver-xorg-video-nouveau
#    - nouveau-firmware
#  when: actual_hostname == "dt"
